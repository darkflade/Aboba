package main

import (
	"database/sql"
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// Получить все отделы для отображения
func viewDepartments(db *sql.DB, nav []NavItem) gin.HandlerFunc {
	return func(c *gin.Context) {
		/*
			rows, err := db.Query("SELECT ОТД_НОМЕР, ОТД_РУК, ОТД_СОТР_ЗАРП, ОТД_РАЗМ FROM ОТДЕЛЫ")
			if err != nil {
				showError(c, fmt.Sprintf("Ошибка при получении данных об отделах: %v", err))
				return
			}
			defer rows.Close()

			var deps []Department
			for rows.Next() {
				var d Department
				if err := rows.Scan(&d.ID, &d.BossId, &d.TotalSalary, &d.Size); err != nil {
					showError(c, fmt.Sprintf("Ошибка парсинга данных отдела: %v", err))
					return
				}
				deps = append(deps, d)
			}

			c.HTML(http.StatusOK, "view_departments.html", gin.H{
				"Title": "Отделы",
				"Nav":   nav,
				"Deps":  deps,
			})*/
	}
}

// Получить всех сотрудников из отдела для отображения
func viewEmployeesByDepartment(db *sql.DB, nav []NavItem) gin.HandlerFunc {
	return func(c *gin.Context) {
		DeptID := c.Param("id")
		if DeptID == "" {
			// Получаем первый существующий ID отдела
			row := db.QueryRow("SELECT ОТД_НОМЕР FROM ОТДЕЛЫ ORDER BY ОТД_НОМЕР LIMIT 1")
			var firstDeptID int
			if err := row.Scan(&firstDeptID); err != nil {
				showError(c, "Не удалось получить отделы")
				return
			}
			DeptID = strconv.Itoa(firstDeptID)
		}
		rows, err := db.Query("SELECT СЛУ_НОМЕР, СЛУ_ИМЯ, СЛУ_СТАТ, СЛУ_ЗАРП, СЛУ_ОТД_НОМЕР FROM СЛУЖАЩИЕ WHERE СЛУ_ОТД_НОМЕР = ?", DeptID)
		if err != nil {
			showError(c, fmt.Sprintf("Ошибка при получении данных о сотрудниках: %v", err))
			return
		}
		defer rows.Close()

		var emps []Employee
		for rows.Next() {
			var e Employee
			if err := rows.Scan(&e.ID, &e.Name, &e.Status, &e.Salary, &e.DeptID); err != nil {
				showError(c, fmt.Sprintf("Ошибка парсинга данных сотрудника: %v", err))
				return
			}
			emps = append(emps, e)
		}

		// Проверка на отсутствие сотрудников
		if len(emps) == 0 {
			c.HTML(http.StatusOK, "view_employees.html", gin.H{
				"Title":   "Сотрудники",
				"Nav":     nav,
				"Emps":    emps,
				"Message": "В этом отделе нет сотрудников.",
			})
			return
		}

		c.HTML(http.StatusOK, "view_employees.html", gin.H{
			"Title": "Сотрудники",
			"Nav":   nav,
			"Emps":  emps,
		})
	}
}

// Форма для добавления/редактирования сотрудника
func formEmployee(db *sql.DB, nav []NavItem) gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		var e Employee
		var err error

		if id != "" && id != "new" {
			eID, _ := strconv.Atoi(id)
			row := db.QueryRow("SELECT СЛУ_НОМЕР, СЛУ_ИМЯ, СЛУ_СТАТ, СЛУ_ЗАРП, СЛУ_ОТД_НОМЕР FROM СЛУЖАЩИЕ WHERE СЛУ_НОМЕР = ?", eID)
			err = row.Scan(&e.ID, &e.Name, &e.Status, &e.Salary, &e.DeptID)
			if err != nil {
				showError(c, fmt.Sprintf("Сотрудник не найден: %v", err))
				return
			}
		}

		// Получить доступные ID отделов
		depsRows, err := db.Query("SELECT ОТД_НОМЕР FROM ОТДЕЛЫ")
		if err != nil {
			showError(c, fmt.Sprintf("Ошибка получения отделов: %v", err))
			return
		}
		defer depsRows.Close()

		var deptIDs []int
		for depsRows.Next() {
			var did int
			if err := depsRows.Scan(&did); err != nil {
				showError(c, fmt.Sprintf("Ошибка парсинга ID отдела: %v", err))
				return
			}
			deptIDs = append(deptIDs, did)
		}

		c.HTML(http.StatusOK, "form_employee.html", gin.H{
			"Title":   "Сотрудник",
			"Nav":     nav,
			"Emp":     e,
			"DeptIDs": deptIDs,
		})
	}
}

// Создать нового сотрудника
func createEmployee(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		name := c.PostForm("name")
		status := c.PostForm("status")
		salaryStr := c.PostForm("salary")
		deptIDStr := c.PostForm("dept_id")

		// Валидация данных
		salary, err := strconv.ParseFloat(salaryStr, 64)
		if err != nil {
			showError(c, "Некорректная зарплата")
			return
		}

		deptID, err := strconv.Atoi(deptIDStr)
		if err != nil {
			showError(c, "Некорректный ID отдела")
			return
		}

		tx, err := db.Begin()
		if err != nil {
			showError(c, fmt.Sprintf("Ошибка транзакции: %v", err))
			return
		}

		// 1) Вставить сотрудника
		_, err = tx.Exec(
			`INSERT INTO СЛУЖАЩИЕ (СЛУ_ИМЯ, СЛУ_СТАТ, СЛУ_ЗАРП, СЛУ_ОТД_НОМЕР)
       VALUES (?, ?, ?, ?)`,
			name, status, salary, deptID,
		)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка создания сотрудника: %v", err))
			return
		}

		// 2) Обновить данные отдела
		_, err = tx.Exec(
			`UPDATE ОТДЕЛЫ
                 SET ОТД_РАЗМ = ОТД_РАЗМ + 1,
                 ОТД_СОТР_ЗАРП = ОТД_СОТР_ЗАРП + ?
               WHERE ОТД_НОМЕР = ?`,
			salary, deptID,
		)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка обновления отдела: %v", err))
			return
		}

		tx.Commit()
		c.Redirect(http.StatusFound, "/view/employees")
	}
}

// Удалить сотрудника
func deleteEmployee(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			showError(c, "Некорректный ID сотрудника")
			return
		}

		// Получить данные для обновления отдела
		var deptID int
		var salary float64
		row := db.QueryRow(`
            SELECT СЛУ_ОТД_НОМЕР, СЛУ_ЗАРП
            FROM СЛУЖАЩИЕ WHERE СЛУ_НОМЕР = ?`, id)
		if err := row.Scan(&deptID, &salary); err != nil {
			showError(c, fmt.Sprintf("Сотрудник не найден: %v", err))
			return
		}

		tx, err := db.Begin()
		if err != nil {
			showError(c, fmt.Sprintf("Ошибка транзакции: %v", err))
			return
		}

		// Удалить сотрудника
		_, err = tx.Exec("DELETE FROM СЛУЖАЩИЕ WHERE СЛУ_НОМЕР = ?", id)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка удаления сотрудника: %v", err))
			return
		}

		// Обновить данные отдела
		_, err = tx.Exec(`
            UPDATE ОТДЕЛЫ
             SET ОТД_РАЗМ = ОТД_РАЗМ - 1,
            ОТД_СОТР_ЗАРП = ОТД_СОТР_ЗАРП - ?
               WHERE ОТД_НОМЕР = ?`,
			salary, deptID,
		)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка обновления отдела: %v", err))
			return
		}

		tx.Commit()
		c.Redirect(http.StatusFound, "/view/employees")
	}
}

// Обновить данные сотрудника
func updateEmployee(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			showError(c, "Некорректный ID сотрудника")
			return
		}

		salaryStr := c.PostForm("salary")
		salary, err := strconv.ParseFloat(salaryStr, 64)
		if err != nil {
			showError(c, "Некорректная зарплата")
			return
		}

		// Получить старые данные
		var oldSalary float64
		var deptID int
		row := db.QueryRow(`
            SELECT СЛУ_ЗАРП, СЛУ_ОТД_НОМЕР
            FROM СЛУЖАЩИЕ WHERE СЛУ_НОМЕР = ?`, id)
		if err := row.Scan(&oldSalary, &deptID); err != nil {
			showError(c, fmt.Sprintf("Сотрудник не найден: %v", err))
			return
		}

		tx, err := db.Begin()
		if err != nil {
			showError(c, fmt.Sprintf("Ошибка транзакции: %v", err))
			return
		}

		// Обновить зарплату сотрудника
		_, err = tx.Exec(`
            UPDATE СЛУЖАЩИЕ
            SET СЛУ_ЗАРП = ?
               WHERE СЛУ_НОМЕР = ?`,
			salary, id,
		)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка обновления сотрудника: %v", err))
			return
		}

		// Обновить данные отдела
		delta := salary - oldSalary
		_, err = tx.Exec(`
            UPDATE ОТДЕЛЫ
             SET ОТД_СОТР_ЗАРП = ОТД_СОТР_ЗАРП + ?
               WHERE ОТД_НОМЕР = ?`,
			delta, deptID,
		)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка обновления отдела: %v", err))
			return
		}

		tx.Commit()
		c.Redirect(http.StatusFound, "/view/employees")
	}
}

// Форма для изменения руководителя отдела
func formDepartment(db *sql.DB, nav []NavItem) gin.HandlerFunc {
	return func(c *gin.Context) {
		/*
			idStr := c.Param("id")
			id, err := strconv.Atoi(idStr)
			if err != nil {
				showError(c, "Некорректный ID отдела")
				return
			}

			var d Department
			row := db.QueryRow("SELECT ОТД_НОМЕР, ОТД_РУК FROM ОТДЕЛЫ WHERE ОТД_НОМЕР = ?", id)
			if err := row.Scan(&d.ID, &d.Boss); err != nil {
				showError(c, fmt.Sprintf("Отдел не найден: %v", err))
				return
			}

			// Получить сотрудников отдела
			empsRows, err := db.Query("SELECT СЛУ_НОМЕР, СЛУ_ИМЯ FROM СЛУЖАЩИЕ WHERE СЛУ_ОТД_НОМЕР = ?", id)
			if err != nil {
				showError(c, fmt.Sprintf("Ошибка получения сотрудников: %v", err))
				return
			}
			defer empsRows.Close()

			type EmpShort struct {
				ID   int
				Name string
			}
			var emps []EmpShort

			for empsRows.Next() {
				var e EmpShort
				if err := empsRows.Scan(&e.ID, &e.Name); err != nil {
					showError(c, fmt.Sprintf("Ошибка парсинга данных сотрудника: %v", err))
					return
				}
				emps = append(emps, e)
			}

			c.HTML(http.StatusOK, "form_department.html", gin.H{
				"Title": "Отдел",
				"Nav":   nav,
				"Dept":  d,
				"Emps":  emps,
			})
		*/
	}
}

// Обновить руководителя отдела
func updateDepartment(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			showError(c, "Некорректный ID отдела")
			return
		}

		boss := c.PostForm("boss")
		if boss == "" {
			showError(c, "Не указан руководитель")
			return
		}

		tx, err := db.Begin()
		if err != nil {
			showError(c, fmt.Sprintf("Ошибка транзакции: %v", err))
			return
		}

		// Обновить руководителя
		_, err = tx.Exec("UPDATE ОТДЕЛЫ SET ОТД_РУК = ? WHERE ОТД_НОМЕР = ?", boss, id)
		if err != nil {
			tx.Rollback()
			showError(c, fmt.Sprintf("Ошибка обновления отдела: %v", err))
			return
		}

		tx.Commit()
		c.Redirect(http.StatusFound, "/view/departments")
	}
}

// Показать страницу ошибки
func showError(c *gin.Context, err string) {
	c.HTML(http.StatusServiceUnavailable, "error.html", gin.H{
		"Title": "Ошибка",
		"Error": err,
	})
}
